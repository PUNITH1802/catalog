#include <iostream>
#include <string>
#include <cmath>
#include <json.hpp>  
using json = nlohmann::json;
using namespace std;


int convertToBase10(const string& value, int base) {
    int result = 0;
    int power = 0;
    
    for (int i = value.size() - 1; i >= 0; --i) {
        if (isdigit(value[i])) {
            result += (value[i] - '0') * pow(base, power++);
        } else {
           
            result += (toupper(value[i]) - 'A' + 10) * pow(base, power++);
        }
    }
    
    return result;
}

int main() {

    string jsonString = R"({
        "keys": {
            "n": 4,
            "k": 3
        },
        "1": {
            "base": "10",
            "value": "4"
        },
        "2": {
            "base": "2",
            "value": "111"
        },
        "3": {
            "base": "10",
            "value": "12"
        },
        "6": {
            "base": "4",
            "value": "213"
        }
    })";
    
    
    json input = json::parse(jsonString);

    
    int n = input["keys"]["n"];
    int k = input["keys"]["k"];
    
    // Store the values in base 10
    vector<int> values;

    // Extract the data and convert it to base 10
    for (auto& [key, obj] : input.items()) {
        if (key == "keys") continue;  // Skip the "keys" part

        int base = stoi(obj["base"].get<string>());
        string valueStr = obj["value"].get<string>();

        // Convert the value from the given base to base 10
        int base10Value = convertToBase10(valueStr, base);
        values.push_back(base10Value);
    }

    // Now you can work with the values in base 10
    // Example: Summing the first k values
    int sum = 0;
    for (int i = 0; i < k; ++i) {
        sum += values[i];
    }

    // Output the result
    cout << "Sum of the first " << k << " values in base 10: " << sum << endl;

    return 0;
}
